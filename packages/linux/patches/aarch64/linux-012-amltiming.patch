From d0314750701f07c0552b3964df53a44e3eff4267 Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Tue, 27 Dec 2016 16:14:23 +0100
Subject: [PATCH 1/1] [AML] v4l2_qbuf / vsync / freerun_mode_3

Conflicts:
	drivers/amlogic/amports/vh264.c
	drivers/amlogic/video_dev/amlvideo.c
---
 drivers/amlogic/amports/video.c      |  2 ++
 drivers/amlogic/video_dev/amlvideo.c | 53 ++++++++++++++++++++++++++++++++----
 2 files changed, 49 insertions(+), 6 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 7481409..b723e0b 100644
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -3637,6 +3637,8 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 	}
 	if (omx_secret_mode == true) {
 		u32 system_time = timestamp_pcrscr_get();
+		video_notify_flag |= VIDEO_NOTIFY_TRICK_WAIT;
+		atomic_set(&trickmode_framedone, 1);
 		int diff = system_time - omx_pts;
 		if ((diff - omx_pts_interval_upper) > 0
 			|| (diff - omx_pts_interval_lower) < 0) {
diff --git a/drivers/amlogic/video_dev/amlvideo.c b/drivers/amlogic/video_dev/amlvideo.c
index 20f3431..42216a2 100644
--- a/drivers/amlogic/video_dev/amlvideo.c
+++ b/drivers/amlogic/video_dev/amlvideo.c
@@ -67,9 +67,11 @@ AMLVIDEO_MINOR_VERSION, AMLVIDEO_RELEASE)
 
 #define AMLVIDEO_POOL_SIZE 16
 static struct vfq_s q_ready;
+static struct vfq_s q_omx;
 /*extern bool omx_secret_mode;*/
 static u8 first_frame;
 static u64 last_pts_us64;
+static u32 omx_freerun_index = 0;
 
 #define DUR2PTS(x) ((x) - ((x) >> 4))
 #define DUR2PTS_RM(x) ((x) & 0xf)
@@ -149,9 +151,11 @@ static struct vivi_fmt formats[] = {
 };
 
 struct vframe_s *amlvideo_pool_ready[AMLVIDEO_POOL_SIZE + 1];
+struct vframe_s *amlvideo_pool_omx[AMLVIDEO_POOL_SIZE + 1];
 /* ------------------------------------------------------------------
  *           provider operations
  *-----------------------------------------------------------------*/
+
 static struct vframe_s *amlvideo_vf_peek(void *op_arg)
 {
 	return vfq_peek(&q_ready);
@@ -187,10 +191,11 @@ static int amlvideo_vf_states(struct vframe_states *states, void *op_arg)
 {
 	/* unsigned long flags; */
 	/* spin_lock_irqsave(&lock, flags); */
+	int avail_count = vfq_level(&q_ready) + vfq_level(&q_omx);
 	states->vf_pool_size = AMLVIDEO_POOL_SIZE;
 	states->buf_recycle_num = 0;
-	states->buf_free_num = AMLVIDEO_POOL_SIZE - vfq_level(&q_ready);
-	states->buf_avail_num = vfq_level(&q_ready);
+	states->buf_free_num = AMLVIDEO_POOL_SIZE - avail_count;
+	states->buf_avail_num = avail_count;
 	/* spin_unlock_irqrestore(&lock, flags); */
 	return 0;
 }
@@ -329,6 +334,8 @@ static int video_receiver_event_fun(int type, void *data, void *private_data)
 			omx_secret_mode = true;
 			vfq_init(&q_ready, AMLVIDEO_POOL_SIZE + 1,
 					&amlvideo_pool_ready[0]);
+                        vfq_init(&q_omx, AMLVIDEO_POOL_SIZE + 1,
+                                        &amlvideo_pool_omx[0]);
 			vf_provider_init(&amlvideo_vf_prov, PROVIDER_NAME,
 						&amlvideo_vf_provider, NULL);
 			vf_reg_provider(&amlvideo_vf_prov);
@@ -577,8 +584,34 @@ static int vidioc_querybuf(struct file *file, void *priv, struct v4l2_buffer *p)
 static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *p)
 {
 	int ret = 0;
+        u32 index;
 	if (omx_secret_mode == true)
+	{
+		if (freerun_mode == 3)
+		{
+			struct vframe_s *vf;
+			while ((vf = vfq_peek(&q_omx)))
+			{
+				index = (u32)vf->pts_us64;
+				if (p->index > index)
+				{
+					vf_put(vfq_pop(&q_omx), RECEIVER_NAME);
+					printk("vidioc_qbuf skip: index:%u:%u\n", p->index, index);
+					continue;
+				}
+				else if (p->index == index)
+				{
+					vf = (vfq_pop(&q_omx));
+					if (p->flags & V4L2_BUF_FLAG_DONE)
+						vf_put(vf, RECEIVER_NAME);
+					else
+						vfq_push(&q_ready, vf);
+				}
+				break;
+			}
+		}
 		return ret;
+	}
 
 	if (ppmgrvf) {
 		vf_put(ppmgrvf, RECEIVER_NAME);
@@ -653,9 +686,6 @@ static int freerun_dqbuf(struct v4l2_buffer *p)
 		return -EAGAIN;
 	}
 	if (omx_secret_mode == true) {
-		vfq_push(&q_ready, ppmgrvf);
-		p->index = 0;
-
 		if (ppmgrvf->pts_us64) {
 			first_frame = 1;
 			pts_us64 = ppmgrvf->pts_us64;
@@ -672,6 +702,17 @@ static int freerun_dqbuf(struct v4l2_buffer *p)
 		p->timecode.type = ppmgrvf->width;
 		p->timecode.flags = ppmgrvf->height;
 
+		if (freerun_mode != 3)
+		{
+			p->index = 0;
+			vfq_push(&q_ready, ppmgrvf);
+		}
+		else
+		{
+			p->index = omx_freerun_index;
+			ppmgrvf->pts_us64 = omx_freerun_index++;
+			vfq_push(&q_omx, ppmgrvf);
+		}
 		vf_notify_receiver(
 				PROVIDER_NAME,
 				VFRAME_EVENT_PROVIDER_VFRAME_READY,
@@ -804,7 +845,7 @@ static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *p)
 {
 	int ret = 0;
 
-	if (freerun_mode == 1) {
+	if (freerun_mode == 1 || freerun_mode == 3) {
 		/* pr_err("amlvideo dqbuf called freerun_mode=1\n"); */
 		ret = freerun_dqbuf(p);
 	} else if (freerun_mode == 2) {
-- 
2.1.4

