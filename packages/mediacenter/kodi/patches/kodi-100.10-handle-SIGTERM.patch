diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index ccfe99d70f..68aeeb9b5e 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -2356,12 +2356,12 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
   switch (pMsg->dwMessage)
   {
   case TMSG_POWERDOWN:
-    Stop(EXITCODE_POWERDOWN);
+    SetExitCode(EXITCODE_POWERDOWN);
     g_powerManager.Powerdown();
     break;
 
   case TMSG_QUIT:
-    Stop(EXITCODE_QUIT);
+    SetExitCode(EXITCODE_POWERDOWN);
     break;
 
   case TMSG_SHUTDOWN:
@@ -2382,12 +2382,13 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
 
   case TMSG_RESTART:
   case TMSG_RESET:
-    Stop(EXITCODE_REBOOT);
+    SetExitCode(EXITCODE_POWERDOWN);
     g_powerManager.Reboot();
     break;
 
   case TMSG_RESTARTAPP:
 #if defined(TARGET_WINDOWS) || defined(TARGET_LINUX)
+    SetExitCode(EXITCODE_POWERDOWN);
     Stop(EXITCODE_RESTARTAPP);
 #endif
     break;
@@ -2806,6 +2807,14 @@ bool CApplication::Cleanup()
   }
 }
 
+void CApplication::SetExitCode(int exitCode)
+{
+  // save it for CEC
+  m_ExitCode = exitCode;
+  m_ExitCodeSet = true;
+}
+
+
 void CApplication::Stop(int exitCode)
 {
   try
@@ -2847,7 +2856,6 @@ void CApplication::Stop(int exitCode)
     // Needs cleaning up
     CApplicationMessenger::GetInstance().Stop();
     m_AppFocused = false;
-    m_ExitCode = exitCode;
     CLog::Log(LOGNOTICE, "stop all");
 
     // cancel any jobs from the jobmanager
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 272dcadfdf..9b1817657c 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -147,6 +147,7 @@ public:
   bool StartServer(enum ESERVERS eServer, bool bStart, bool bWait = false);
 
   bool IsCurrentThread() const;
+  void SetExitCode(int exitCode);
   void Stop(int exitCode);
   void RestartApp();
   void UnloadSkin(bool forReload = false);
diff --git a/xbmc/XBApplicationEx.cpp b/xbmc/XBApplicationEx.cpp
index 035aed2997..34102f5ae1 100644
--- a/xbmc/XBApplicationEx.cpp
+++ b/xbmc/XBApplicationEx.cpp
@@ -46,6 +46,7 @@ CXBApplicationEx::CXBApplicationEx()
   m_bStop = false;
   m_AppFocused = true;
   m_ExitCode = EXITCODE_QUIT;
+  m_ExitCodeSet = false;
   m_renderGUI = false;
 }
 
diff --git a/xbmc/XBApplicationEx.h b/xbmc/XBApplicationEx.h
index 9bc14fada7..f696b89bb1 100644
--- a/xbmc/XBApplicationEx.h
+++ b/xbmc/XBApplicationEx.h
@@ -42,6 +42,7 @@ public:
   // Variables for timing
   bool m_bStop;
   int  m_ExitCode;
+  bool m_ExitCodeSet;
   bool m_AppFocused;
   bool m_renderGUI;
 
diff --git a/xbmc/platform/posix/main.cpp b/xbmc/platform/posix/main.cpp
index bee93da11a..4456bc4775 100644
--- a/xbmc/platform/posix/main.cpp
+++ b/xbmc/platform/posix/main.cpp
@@ -44,6 +44,15 @@
 #include "platform/XbmcContext.h"
 #include "settings/AdvancedSettings.h"
 #include "utils/log.h"
+#include "Application.h"
+
+void xbmc_term_handler(int signum)
+{
+  CLog::Log(LOGINFO, "Received SIGTERM...");
+  if (!g_application.m_ExitCodeSet)
+    g_application.SetExitCode(EXITCODE_RESTARTAPP);
+  g_application.Stop(EXITCODE_RESTARTAPP);
+}
 
 #ifdef HAS_LIRC
 #include "input/linux/LIRC.h"
@@ -87,6 +96,12 @@ void XBMC_POSIX_HandleSignal(int sig)
 
 int main(int argc, char* argv[])
 {
+  // SIGTERM handler
+  struct sigaction action;
+  memset(&action, 0, sizeof(struct sigaction));
+  action.sa_handler = xbmc_term_handler;
+  sigaction(SIGTERM, &action, NULL);
+
   // set up some xbmc specific relationships
   XBMC::Context context;
 
