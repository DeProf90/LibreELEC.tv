From 8a21c1acfe698b87ee1cc3bca698c7240baea461 Mon Sep 17 00:00:00 2001
From: Alex Deryskyba <alex@codesnake.com>
Date: Thu, 4 May 2017 12:49:09 +0200
Subject: [PATCH] aml: fix bookmark thumbnails creation when playing a video
 with amcodec

---
 .../VideoPlayer/VideoRenderers/RenderCapture.cpp   |    3 ++
 .../VideoPlayer/VideoRenderers/RenderCapture.h     |    4 ++
 xbmc/utils/ScreenshotAML.cpp                       |   43 +++++++++++---------
 3 files changed, 30 insertions(+), 20 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.cpp
index 9bf0310..ca8b416 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.cpp
@@ -252,6 +252,9 @@ void CRenderCaptureGL::EndRender()
   else
 #endif
   {
+#ifdef HAS_LIBAMCODEC
+    CScreenshotAML::CaptureVideoFrame(m_pixels, m_width, m_height);
+#endif
     SetState(CAPTURESTATE_DONE);
   }
 }
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
index 9f9565f..0a77128 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderCapture.h
@@ -167,6 +167,10 @@ class CRenderCapture : public CRenderCaptureDispmanX
 #elif defined(HAS_GL) || defined(HAS_GLES)
 #include "system_gl.h"
 
+#ifdef HAS_LIBAMCODEC
+#include "utils/ScreenshotAML.h"
+#endif // HAS_LIBAMCODEC
+
 class CRenderCaptureGL : public CRenderCaptureBase
 {
   public:
diff --git a/xbmc/utils/ScreenshotAML.cpp b/xbmc/utils/ScreenshotAML.cpp
index 3e73437..e0d1d22 100644
--- a/xbmc/utils/ScreenshotAML.cpp
+++ b/xbmc/utils/ScreenshotAML.cpp
@@ -43,7 +43,8 @@ void CScreenshotAML::CaptureVideoFrame(unsigned char *buffer, int iWidth, int iH
   int captureFd = open(CAPTURE_DEVICEPATH, O_RDWR, 0);
   if (captureFd >= 0)
   {
-    int buffSize = iWidth * iHeight * 3;
+    int stride = ((iWidth + 31) & ~31) * 3;
+    int buffSize = stride * iHeight;
     int readSize = 0;
     // videobuffer should be rgb according to docu - but it is bgr ...
     unsigned char *videoBuffer = new unsigned char[buffSize];
@@ -51,7 +52,7 @@ void CScreenshotAML::CaptureVideoFrame(unsigned char *buffer, int iWidth, int iH
     if (videoBuffer != NULL)
     {
       // configure destination
-      ioctl(captureFd, AMVIDEOCAP_IOW_SET_WANTFRAME_WIDTH, iWidth);
+      ioctl(captureFd, AMVIDEOCAP_IOW_SET_WANTFRAME_WIDTH, stride / 3);
       ioctl(captureFd, AMVIDEOCAP_IOW_SET_WANTFRAME_HEIGHT, iHeight);
       readSize = pread(captureFd, videoBuffer, buffSize, 0);
     }
@@ -60,33 +61,35 @@ void CScreenshotAML::CaptureVideoFrame(unsigned char *buffer, int iWidth, int iH
 
     if (readSize == buffSize)
     {
-      unsigned char *videoPtr = videoBuffer;
-
       if (!bBlendToBuffer)
       {
         memset(buffer, 0xff, buffSize);
       }
 
-      for (int processedBytes = 0; processedBytes < buffSize; processedBytes += 3, buffer+=4)
+      for (int y = 0; y < iHeight; ++y)
       {
-        float alpha = buffer[3] / (float)255;
+        unsigned char *videoPtr = videoBuffer + y * stride;
 
-        if (bBlendToBuffer)
-        {
-          //B
-          buffer[0] = alpha * (float)buffer[0] + (1 - alpha) * (float)videoPtr[0];
-          //G
-          buffer[1] = alpha * (float)buffer[1] + (1 - alpha) * (float)videoPtr[1];
-          //R
-          buffer[2] = alpha * (float)buffer[2] + (1 - alpha) * (float)videoPtr[2];
-          //A
-          buffer[3] = 0xff;// we are solid now
-        }
-        else
+        for (int x = 0; x < iWidth; ++x, buffer += 4, videoPtr += 3)
         {
-          memcpy(buffer, videoPtr, 3);
+          float alpha = buffer[3] / (float)255;
+
+          if (bBlendToBuffer)
+          {
+            //B
+            buffer[0] = alpha * (float)buffer[0] + (1 - alpha) * (float)videoPtr[0];
+            //G
+            buffer[1] = alpha * (float)buffer[1] + (1 - alpha) * (float)videoPtr[1];
+            //R
+            buffer[2] = alpha * (float)buffer[2] + (1 - alpha) * (float)videoPtr[2];
+            //A
+            buffer[3] = 0xff;// we are solid now
+          }
+          else
+          {
+            memcpy(buffer, videoPtr, 3);
+          }
         }
-        videoPtr += 3;
       }
     }
     delete [] videoBuffer;
-- 
1.7.10.4

